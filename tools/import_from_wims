#!/usr/bin/python
# -*- coding: utf-8 -*
import io, os.path, re, sys

# Templates for pl and pltp files

template = u"""template=/template/wims_{type}.pl
template=/exercices_src/{topic}/metadata.pl
@ /{filename} [raw_code.cpp]
code_file=raw_code.cpp
"""

template_pltp = u"""template=/exercices_src/{topic}/metadata.pl
title={{{{topicname}}}}
introduction==
Une collection d'exercices sur les {{{{topicname}}}}.
==
"""

type_re = re.compile("_(input|output|result|code|silentcode)\.")
exercises=dict()

def create_template(filename):
    basename = os.path.basename(filename)
    topic = os.path.split(os.path.dirname(filename))[1]
    if topic == 'exercices_src':
        # Backward compatibility: hande files exercises_src/topic_exo.cpp
        pieces = basename.split("_")
        topic = pieces[0]
        basename = '_'.join(pieces[1:])

    pl_name = basename+".pl"
    pl_dirname = os.path.join("exercices", topic)
    pl_fullname = os.path.join(pl_dirname, pl_name)

    print(filename, basename, topic, pl_name, pl_dirname, pl_fullname)

    # Setup the exercise type, based on the file name.
    match = re.search(type_re, basename)
    if match:
        type = match.group(1)
    else:
        type = "output"

    # Create the output directory if not yet existent
    try:
        os.mkdir(pl_dirname)
    except OSError:
        pass

    # Generate the pl file
    io.open(pl_fullname, "w").write(template.format(type=type, filename=filename, topic=topic))

    # Add the exercise to the index
    if topic not in exercises:
        exercises[topic] = []
    exercises[topic].append(pl_fullname)

for filename in sys.argv[1:]:
    create_template(filename)

for topic in exercises:
    pltp_fullname = os.path.join("exercices", topic + ".pltp")
    fd = io.open(pltp_fullname, "w")
    fd.write(template_pltp.format(topic=topic))
    for filename in exercises[topic]:
        fd.write(u"@ /" + filename + "\n")
